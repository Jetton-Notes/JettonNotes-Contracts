#include "imports/stdlib.fc";

const op::verify = "op::verify"c;
const int P1_SIZE = 48 * 8;
const int P2_SIZE = 96 * 8;



const slice IC0 = "96258bc2e0e0087c9e84c8217b91cf528805982db3c5611b3495787ad0463c0f4e211256501f73f9645710ef9dfec5d6"s;
const slice IC1 = "b5dfc77bd022ef9937d61ce6455f8f47562b5400354451c8b04839188f786e77562faea6e2d7f262aaa3ea8c8868611b"s;
const slice IC2 = "9177159f4f85c5ebbd4a2ec9dea0581eb10c44032fe3885d1be7f4907dbb364935db7a9057ad20c7133bbd2a1529aef2"s;
const slice IC3 = "944a99b0ef727a3e01524de8512124df716b9d9d38681a1a414733235ea9c9f8545e12b4d00e0f7e0c2ccbda1c75dfb4"s;
const slice IC4 = "b2c306ddcb88e69ae863f2a139eb834953c06ad1b150df4378fda5550331466f1bc4c17e2e496afc0c65b90f1f7559e0"s;
const slice IC5 = "b8b521d235f0b60c5543046a133835a54b3cdd8c431b788b19898bb49cabe5c589b1f68e385548daa0ea3d35fbb01db0"s;
const slice IC6 = "a94f8c3b68e489e24fae68ab8828302c3a100fd14c47f3eca6d252bd7bb07d9c5102a96796b193b63a679c4e61a334a7"s;
const slice IC7 = "b68243868b0086a6eeb8e27fbd9bdaa82cdbfe08fdfbe208a940f67378148ad2748ceb514d89df08262af90e983edcf9"s;

const slice vk_gamma_2 = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;
const slice vk_delta_2 = "86d78db1fe280eaba075a81af774e397f62eda259110d3b62d67914c8a7d33296c7cb6bcb585925855efdf338277adcd03d9d0ae35f8a4db34f9031457ee139dff6f8fff9f95a3f0f8e5af14ea316f5854947dd2da747f20bef045b9f911a4b8"s;
const slice vk_alpha_1 = "a3e3e312fd1ad9bb89947b418011dbc2c469544073e3247490aeab56c3cfff753e9e8c6624c5947f11f866c9c8172b21"s;
const slice vk_beta_2 = "b643de0696778928888e5c43df458a0b580d5c8b17ea66031cb0477887c2572bc0494921d724eb428bde535c457d4eb40abd8a56caf186d6a1bda48b146552937c6c1d5a6f8ffb37f7a91167256dd9f86952fc8b3b714bb1aff879fbc147d121"s;

slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
slice bls_g1_multiexp(
    
    slice x1, int y1,
    
    slice x2, int y2,
    
    slice x3, int y3,
    
    slice x4, int y4,
    
    slice x5, int y5,
    
    slice x6, int y6,
    
    slice x7, int y7,
    
    int n
) asm "BLS_G1_MULTIEXP";
int bls_pairing(slice x1, slice y1, slice x2, slice y2, slice x3, slice y3, slice x4, slice y4, int n) asm "BLS_PAIRING";

global int ctx_res;

;; load_data populates storage variables using stored data
() load_data() impure {

    var ds = get_data().begin_parse();

    ctx_res = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_res, 32)
            .end_cell()
    );
}


(slice, slice) load_p1(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p1 = first_bits(s, P1_SIZE);
    s~skip_bits(P1_SIZE);
    return (s, p1);
}

(slice, slice) load_p2(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p2 = first_bits(s, P2_SIZE);
    s~skip_bits(P2_SIZE);
    return (s, p2);
}

(slice, int) load_newint(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    int x = s~load_uint(256);
    return (s, x);
}

() groth16Verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    
    int pubInput0 ,
    
    int pubInput1 ,
    
    int pubInput2 ,
    
    int pubInput3 ,
    
    int pubInput4 ,
    
    int pubInput5 ,
    
    int pubInput6 
    
) impure {

    slice cpub = bls_g1_multiexp(
        
        IC1, pubInput0,
        
        IC2, pubInput1,
        
        IC3, pubInput2,
        
        IC4, pubInput3,
        
        IC5, pubInput4,
        
        IC6, pubInput5,
        
        IC7, pubInput6,
        
        7
    );


    cpub = bls_g1_add(cpub, IC0);
    slice pi_a_neg = bls_g1_neg(pi_a);
    int a = bls_pairing(
        cpub, vk_gamma_2,
        pi_a_neg, pi_b,
        pi_c, vk_delta_2,
        vk_alpha_1, vk_beta_2,
        4);
    ;; ctx_res = a;
    if (a == 0) {
        ctx_res = 0;
    } else {
        ctx_res = 1;
    }
    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    
    if (op == op::verify) {

        slice pi_a = in_msg_body~load_p1();
        slice pi_b = in_msg_body~load_p2();
        slice pi_c = in_msg_body~load_p1();


        
        int pubInput0 = in_msg_body~load_newint();
        
        int pubInput1 = in_msg_body~load_newint();
        
        int pubInput2 = in_msg_body~load_newint();
        
        int pubInput3 = in_msg_body~load_newint();
        
        int pubInput4 = in_msg_body~load_newint();
        
        int pubInput5 = in_msg_body~load_newint();
        
        int pubInput6 = in_msg_body~load_newint();
        

        groth16Verify(
            pi_a,
            pi_b,
            pi_c,
            
            pubInput0 ,
            
            pubInput1 ,
            
            pubInput2 ,
            
            pubInput3 ,
            
            pubInput4 ,
            
            pubInput5 ,
            
            pubInput6 
            
        );
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}


int get_res() method_id {
    load_data();
    return ctx_res;
}
