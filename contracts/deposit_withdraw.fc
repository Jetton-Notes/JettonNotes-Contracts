#include "imports/stdlib.fc";
#include "imports/constants.fc";

#include "storage.fc";
#include "verifier.fc";
#include "packing.fc";
#include "address.fc";
#include "utils.fc";

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
   
    storage::load_data(); 

    slice sender_address = cs~load_msg_addr();
    (int workchain,int sender_addr_hashpart) = parse_std_addr(sender_address);

  if (storage::init? == 0) {  ;; request jetton wallets' addresses after deploy
        ;;This will initialize the contract
        throw_unless(exc::incorrect_sender, address::is_creator_address(sender_address));
        storage::init? = 1;
        send_provide_wallet_address_message(storage::jetton_wallet_address);
      
        storage::save_data();
        return ();
    }


    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    ;; The Jetton minter calls back with op::take_wallet_address, done on init

    if (op == op::take_wallet_address) {  ;; change jetton wallet address (used only once)
        slice reported_wallet_address = in_msg_body~load_msg_addr();
        if (address::is_jetton_wallet_address(sender_address) & (storage::jetton_wallet_set == 0)) {
            storage::jetton_wallet_address = reported_wallet_address;
            storage::jetton_wallet_set = 1;
        }

        storage::save_data();
        return ();
    }
 
    if (op == op::excesses) { return (); }
     
    ;;Update the dict so it's accessed from a global storage variable
    if(op == op::transfer_notification){
    
        int transferred_jettons = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr(); ;;Owner address

        cell forwardPayload = in_msg_body~load_ref();
        slice payload = forwardPayload.begin_parse();
        int commitment = payload~load_uint(256);
      ;;Forward payload should contain a 256 bit integer and the address must be the correct jetton walelt address
      
      ifnot (address::is_jetton_wallet_address(sender_address) & commitment != 0){
        ;;Refund invalid jettons sent here
        send_jettons(
            query_id,
            transferred_jettons,
            from_address,
            from_address,
            sender_address,
            0,
            mode::carry_remaining_gas,
            0,
            begin_cell().store_uint(0,32).store_slice("Invalid Jettons").end_cell());
      }

        
        ;;Then store the deposit like op::deposit
          cell packedDepositData = pack::depositData(
            0, ;;Nullified is false
            transferred_jettons
            );

         ;;Save the 
         (cell newDict, int success)  =  udict_add?(storage::deposits_dict, 256, commitment, packedDepositData.begin_parse());

        ;;Check to make sure the commitment exits,
        throw_if(exec::deposit_already_exists, success == 0);

         storage::deposits_dict = newDict;

        ;; Update the dict
        storage::save_data();

      return ();
    }


    if(op == op::withdraw){
        ;;Call the ZKP verifier here
        slice pi_a = in_msg_body~verifier::load_p1();
        slice pi_b = in_msg_body~verifier::load_p2();
        slice pi_c = in_msg_body~verifier::load_p1();

        int pubInput0 = in_msg_body~verifier::load_newint(); ;; This is the nullifierHash
        int pubInput1 = in_msg_body~verifier::load_newint(); ;; This is the commitment hash
        ;;int pubInput2 = in_msg_body~verifier::load_newint(); ;;The workchain value is taken from the address       
        ;;int pubInput3 = in_msg_body~verifier::load_newint(); ;; The address is taken from the sender

        int verificationResult =  verifier::groth16Verify(pi_a,pi_b,pi_c,pubInput0,pubInput1,workchain, sender_addr_hashpart ); ;;Using the sender's address for the pubInput2
        
        throw_if(exec::invalid_proof, verificationResult == 0);

        (slice payload,int found) = storage::deposits_dict.udict_get?(256,pubInput1); ;;Get the withdraw data by commitment
        
        throw_unless(exec::deposit_not_found, found); ;; If the Deposit is not found, throw

        (int nullifierHash, int depositAmount) = unpack::depositData(payload);
        
        ;; Check if the deposit was withdrawn already, if the nullifierHash is zero then it was not withrawn
        throw_if(exec::deposit_nullified, nullifierHash != 0);

        ;;Nullify the amount
        cell packedDepositData = pack::depositData(
            pubInput0, ;;NullifierHash
            depositAmount); ;;This deposit amount is nullified now


        ;;Upate the dict
        cell newDict = udict_set(storage::deposits_dict,256,pubInput1,packedDepositData.begin_parse());

        storage::deposits_dict = newDict;
    
        storage::save_data();


        ;;Send message to withdraw jetton token
        send_jettons(
            query_id,
            depositAmount,
            sender_address,
            sender_address,
            storage::jetton_wallet_address,
            0,
            mode::carry_remaining_gas,
            0,
            begin_cell()
            .store_uint(0,32)
            .store_slice("Jettons Withdrawn from Crypto note")
            .end_cell());

        return ();
    };

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; Checks if there is a deposit at commitment and returns the slice stored at that index in the dict
;; The slice contains the deposit amount and if it's been nullified or not
(int,int) get_deposit(int commitment) method_id {
    storage::load_data();
    
     (slice payload, int success) = storage::deposits_dict.udict_get?(256, commitment);

    throw_unless(exec::deposit_not_found,success);

    return unpack::depositData(payload);
}