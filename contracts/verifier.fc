#include "imports/stdlib.fc";
;; https://docs.ton.org/v3/guidelines/dapps/tutorials/zero-knowledge-proofs
const op::verify = "op::verify"c;
const int P1_SIZE = 48 * 8;
const int P2_SIZE = 96 * 8;

const slice IC0 = "86bd7c11ce786a394558999712286af0ae0e6fd5b32d92c2fbd85e17729ccf62f2c3ee94dadd158b5e54f29d0f5d3c22"s;
const slice IC1 = "b4d52a9848ddd756a99b4f6898639fbacbc96fbef3803becd991b57d3dc5e76fa3efd2c1834219b619cf0dc5eea9671d"s;
const slice IC2 = "833b15917a27208e4f00aa97fb6bfd30c8805fd317ae432e2ca25863f7a7191d3b2894edd4cb3ed4192b9054aa64920f"s;
const slice IC3 = "9586fd28d1a3bac8e7da07099bb7af3dc6a5efe185234cfcfdd7103e176944933ca65bb1a6ed84922f12560b15da241c"s;

const slice vk_gamma_2 = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;
const slice vk_delta_2 = "acf13f499aa872639372012ab30ae00058f5a96c54708225b3c5fd28ffd7c9c000aeda58f3afb6c4f0d06f4bff5116f013c3441c96c5a66380038c0b5be2485fababbfaba63f716f45b73d4e60b3e777fe36506900533bcc9a97b582f9ea32d8"s;
const slice vk_alpha_1 = "a3e3e312fd1ad9bb89947b418011dbc2c469544073e3247490aeab56c3cfff753e9e8c6624c5947f11f866c9c8172b21"s;
const slice vk_beta_2 = "b643de0696778928888e5c43df458a0b580d5c8b17ea66031cb0477887c2572bc0494921d724eb428bde535c457d4eb40abd8a56caf186d6a1bda48b146552937c6c1d5a6f8ffb37f7a91167256dd9f86952fc8b3b714bb1aff879fbc147d121"s;

slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
slice bls_g1_multiexp(
    
    slice x1, int y1,
    
    slice x2, int y2,
    
    slice x3, int y3,
    
    int n
) asm "BLS_G1_MULTIEXP";
int bls_pairing(slice x1, slice y1, slice x2, slice y2, slice x3, slice y3, slice x4, slice y4, int n) asm "BLS_PAIRING";


(slice, slice) verifier::load_p1(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p1 = first_bits(s, P1_SIZE);
    s~skip_bits(P1_SIZE);
    return (s, p1);
}

(slice, slice) verifier::load_p2(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p2 = first_bits(s, P2_SIZE);
    s~skip_bits(P2_SIZE);
    return (s, p2);
}

(slice, int) verifier::load_newint(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    int x = s~load_uint(256);
    return (s, x);
}

(int) verifier::groth16Verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    
    int pubInput0 ,
    
    int pubInput1 ,
    
    int pubInput2 
    
) impure {

    slice cpub = bls_g1_multiexp(
        
        IC1, pubInput0,
        
        IC2, pubInput1,
        
        IC3, pubInput2,
        
        3
    );


    cpub = bls_g1_add(cpub, IC0);
    slice pi_a_neg = bls_g1_neg(pi_a);
    int a = bls_pairing(
        cpub, vk_gamma_2,
        pi_a_neg, pi_b,
        pi_c, vk_delta_2,
        vk_alpha_1, vk_beta_2,
        4);
    if (a == 0) {
        return 0;
    } else {
        return 1;
    }
}
