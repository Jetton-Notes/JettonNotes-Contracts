#include "./imports/constants.fc";
#include "./imports/stdlib.fc";

;;Sends a message to the Jetton Minter to ask for the wallet address for this contract
() send_provide_wallet_address_message(slice jetton_wallet_address) impure inline {
    builder tmp = begin_cell()
                .store_coins(get_compute_fee(WORKCHAIN, PROVIDE_ADDR_GAS))
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::provide_wallet_address, 32)
                .store_uint(now(), 64)
                .store_slice(my_address())
                .store_uint(0, 1);

    builder msg_rewards = begin_cell().store_uint(0x18, 6).store_slice(jetton_wallet_address).store_builder(tmp);
    
    ;;TODO: NOW carry_remaining_balane does the trick but how do I pay for fees separately?
    send_raw_message(msg_rewards.end_cell(), mode::pay_fees_separately);
}


;;This will send the jettons transferred here
() send_jettons(int query_id, int jetton_amount, slice to_address, slice response_address, slice jetton_wallet_address, 
    int msg_value, int sending_mode, int forward_ton_amount, cell forward_payload) impure inline {

    builder msg_body = begin_cell()
                        .store_uint(op::transfer_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(to_address);
    ifnot (null?(response_address)) {
        msg_body = msg_body.store_slice(response_address);
    }
    else {
        msg_body = msg_body.store_uint(0, 2);
    }
    msg_body = msg_body.store_uint(0, 1)
                        .store_coins(forward_ton_amount)
                        .store_uint(1, 1);

    ifnot(null?(forward_payload)) {
        msg_body = msg_body.store_dict(forward_payload);
    }
    else {
        msg_body = msg_body.store_uint(0, 1);
    }

    builder msg = begin_cell()
                .store_uint(0x10, 6) 
                .store_slice(jetton_wallet_address)
                .store_coins(msg_value)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                .store_uint(1, 1)
                .store_ref(msg_body.end_cell());
            
    send_raw_message(msg.end_cell(), sending_mode);  
}
